#!/bin/bash -ex

# Build CAMotics for ARM architecture using chroot and qemu
# This script creates an ARM build environment and compiles CAMotics for Raspberry Pi

set -e

echo "=== Building CAMotics for ARM ==="

# Configuration
CHROOT_DIR="/opt/arm-chroot"
CBANG_REPO="https://github.com/CauldronDevelopmentLLC/cbang"
CAMOTICS_REPO="https://github.com/CauldronDevelopmentLLC/camotics"
CPUS=$(grep -c ^processor /proc/cpuinfo)
FORCE_REBUILD=false
FORCE_CAMOTICS=false
FORCE_CBANG=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."

    # Check if running as root (needed for chroot setup)
    if [[ $EUID -eq 0 ]]; then
        log_error "This script should not be run as root. It will use sudo when needed."
        exit 1
    fi

    # Check for required packages
    local required_packages=("qemu-user-static" "binfmt-support" "debootstrap")
    for pkg in "${required_packages[@]}"; do
        if ! dpkg -l | grep -q "^ii  $pkg"; then
            log_error "Required package '$pkg' is not installed. Please install it first:"
            log_error "  sudo apt-get install $pkg"
            exit 1
        fi
    done

    # Check if binfmt is configured for ARM64
    if ! update-binfmts --display | grep -q "qemu-aarch64"; then
        log_warn "ARM64 binfmt support not configured. Setting it up..."
        sudo update-binfmts --enable qemu-aarch64
    fi

    log_info "Prerequisites check passed."
}

# Setup ARM chroot environment
setup_chroot() {
    log_info "Setting up ARM chroot environment..."

    if [[ -d "$CHROOT_DIR" ]]; then
        if [[ "$FORCE_REBUILD" == "true" ]]; then
            log_warn "Force rebuild requested. Removing existing chroot..."
            sudo rm -rf "$CHROOT_DIR"
        else
            log_info "Chroot directory $CHROOT_DIR already exists. Checking if it's properly set up..."

            # Comprehensive check of chroot environment
            local chroot_ok=true

            # Check for essential files
            if [[ ! -f "$CHROOT_DIR/bin/bash" ]]; then
                log_warn "Missing /bin/bash in chroot"
                chroot_ok=false
            fi

            if [[ ! -f "$CHROOT_DIR/usr/bin/qemu-aarch64-static" ]]; then
                log_warn "Missing qemu-aarch64-static in chroot"
                chroot_ok=false
            fi

            # Check if it's the right architecture (ARM64)
            if [[ -f "$CHROOT_DIR/bin/ls" ]]; then
                local arch=$(file "$CHROOT_DIR/bin/ls" 2>/dev/null | grep -o "ARM\|x86" | head -1)
                if [[ "$arch" == "x86" ]]; then
                    log_warn "Chroot appears to be x86 architecture, but we need ARM64"
                    chroot_ok=false
                fi
            fi

            if [[ "$chroot_ok" == "true" ]]; then
                log_info "Chroot environment appears to be properly set up. Skipping recreation."
                log_info "Use --force to recreate the chroot environment if needed."
                return 0
            else
                log_warn "Chroot environment appears incomplete or incorrect. Recreating..."
                sudo rm -rf "$CHROOT_DIR"
            fi
        fi
    fi

    # Create ARM64 chroot using debootstrap with Debian bookworm (for Python compatibility)
    log_info "Creating ARM64 Debian chroot environment (using bookworm for Python compatibility)..."
    sudo mkdir -p "$CHROOT_DIR"
    sudo debootstrap --foreign --arch=arm64 bookworm "$CHROOT_DIR" http://deb.debian.org/debian/

    # Copy qemu-aarch64-static for chroot execution
    sudo cp /usr/bin/qemu-aarch64-static "$CHROOT_DIR/usr/bin/"

    # Complete the debootstrap second stage
    log_info "Completing debootstrap second stage..."
    sudo chroot "$CHROOT_DIR" /bin/bash -c "
        /debootstrap/debootstrap --second-stage
        apt-get update
        apt-get install -y --no-install-recommends \
            build-essential \
            scons \
            git \
            python3 \
            python3-dev \
            python3-six \
            libssl-dev \
            libqt5websockets5-dev \
            libqt5opengl5-dev \
            libglu1-mesa-dev \
            pkgconf \
            ca-certificates \
            sudo \
            locales \
            libv8-dev \
            libnode-dev \
            libboost-dev \
            libyaml-dev \
            liblz4-dev \
            libzstd-dev \
            libsqlite3-dev \
            libexpat1-dev \I told him to pay attention to it. Happy belated birthday, Dave. I want a week off, two weeks off. My brother's birthday is on the 26th. 61, 70, 64. I don't have one to do that. I don't hear it sizzling, Dave, so that screw might have... That's just my other thermal device. I got a thermal gun, but I think I need a 9-volt battery for this. It's 110, Dave. 110. It's going down, ain't it? Yeah, me and Caleb are going to get that stuff in there tomorrow, Dave. Thank you. Yeah, he's got everything covered up. Okay. Your wood and stuff that I told him.
            libevent-dev \
            libre2-dev \
            libsnappy-dev \
            libxxhash-dev || {
                echo 'Some packages failed to install, but continuing...'
            }
    "

    # Set up locale to avoid warnings
    sudo chroot "$CHROOT_DIR" /bin/bash -c "
        echo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen
        locale-gen en_US.UTF-8
        update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
    "

    log_info "ARM chroot environment setup complete."
}

# Build cbang (dependency for CAMotics)
build_cbang() {
    log_info "Building cbang..."

    # Clone cbang on host if not already present
    if [[ ! -d "$CHROOT_DIR/opt/cbang" ]]; then
        log_info "Cloning cbang on host..."
        if [[ -d "/tmp/cbang" ]]; then rm -rf /tmp/cbang; fi
        git clone --depth=1 $CBANG_REPO /tmp/cbang
        sudo mkdir -p "$CHROOT_DIR/opt"
        sudo cp -r /tmp/cbang "$CHROOT_DIR/opt/cbang"
        rm -rf /tmp/cbang
    fi

    # Check if cbang is already built
    if [[ -f "$CHROOT_DIR/opt/cbang/lib/libcbang.a" && "$FORCE_REBUILD" != "true" ]]; then
        log_info "cbang already built, skipping..."
    else
        if [[ "$FORCE_REBUILD" == "true" && -d "$CHROOT_DIR/opt/cbang" ]]; then
            log_warn "Force rebuild: cleaning cbang build..."
            sudo rm -rf "$CHROOT_DIR/opt/cbang/build"
        fi

        log_info "Building cbang with scons..."
        sudo chroot "$CHROOT_DIR" /bin/bash -c "
            cd /opt/cbang
            export TARGET_ARCH=aarch64
            echo 'Starting cbang build...'
            scons -j$CPUS 2>&1
            echo 'cbang build completed with exit code: $?'
        " || {
            log_error "cbang build failed"
            exit 1
        }
    fi

    log_info "cbang build complete."
}

# Build CAMotics
build_camotics() {
    log_info "Building CAMotics..."

    # Clone CAMotics on host if not already present
    if [[ ! -d "$CHROOT_DIR/opt/camotics" ]]; then
        log_info "Cloning CAMotics on host..."
        if [[ -d "/tmp/camotics" ]]; then rm -rf /tmp/camotics; fi
        git clone --depth=1 $CAMOTICS_REPO /tmp/camotics
        cd /tmp/camotics
        # Clone embedded-v8 as well
        if [[ ! -d embedded-v8 ]]; then
            git clone --depth=1 https://github.com/CauldronDevelopmentLLC/embedded-v8
        fi
        cd ..
        sudo cp -r /tmp/camotics "$CHROOT_DIR/opt/camotics"
        rm -rf /tmp/camotics
    fi

    # Check if CAMotics is already built
    if [[ -f "$CHROOT_DIR/opt/camotics/build/camotics.so" && "$FORCE_REBUILD" != "true" || "$FORCE_CAMOTICS" == "true" || ! -f "$CHROOT_DIR/usr/lib/aarch64-linux-gnu/libnode.so.108" ]]; then
        log_info "CAMotics already built, skipping..."
    else
        if [[ "$FORCE_REBUILD" == "true" && -d "$CHROOT_DIR/opt/camotics" ]]; then
            log_warn "Force rebuild: cleaning CAMotics build..."
            sudo rm -rf "$CHROOT_DIR/opt/camotics/build"
        fi

        sudo chroot "$CHROOT_DIR" /bin/bash -c "
            cd /opt/camotics
            # Set up V8 (JavaScript engine dependency)
            cd embedded-v8
            # Build V8 without sudo (modify build script to not require sudo)
            sed -i 's/sudo //g' build.sh
            ./build.sh
            export V8_HOME=\$PWD
            cd ..

            # Set cbang home
            export CBANG_HOME=/opt/cbang

            # Build CAMotics for ARM64
            export TARGET_ARCH=aarch64
            scons -j$CPUS with_gui=False
        "
    fi

    log_info "CAMotics build complete."
}

# Copy built binary to project
copy_binary() {
    log_info "Copying ARM binary to project..."

    # Check if binary already exists and is ARM64
    if [[ -f "camotics/build/camotics.so" ]]; then
        if file camotics/build/camotics.so | grep -q "ARM.*64"; then
            log_info "ARM64 binary already exists, skipping copy..."
            file camotics/build/camotics.so
            return 0
        fi
        if file camotics/build/camotics.so | grep -q "x86"; then
            log_warn "Existing binary is x86, replacing with ARM64 version..."
        fi
    fi

    # Ensure build directories exist
    mkdir -p camotics/build
    mkdir -p src/py/bbctrl
    mkdir -p bin

    # Copy the ARM binary
    sudo cp "$CHROOT_DIR/opt/camotics/build/camotics.so" camotics/build/
    cp camotics/build/camotics.so src/py/bbctrl/
    cp camotics/build/camotics.so bin/

    # Verify the binary architecture
    if file camotics/build/camotics.so | grep -q "ARM"; then
        log_info "Successfully built ARM version of camotics.so"
        file camotics/build/camotics.so
    else
        log_error "Built binary is not ARM architecture!"
        file camotics/build/camotics.so
        exit 1
    fi
}

# Main execution
main() {
    log_info "Starting CAMotics ARM build process..."

    check_prerequisites
    setup_chroot
    build_cbang
    build_camotics
    copy_binary

    log_info "CAMotics ARM build completed successfully!"
    log_info "The chroot environment is preserved for future builds."
    log_info "Use --force to recreate the chroot if needed."
    log_info "You can now run 'make pkg' to build the firmware package with ARM camotics."
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in

        --force-cbang)
            FORCE_CBANG=true
            shift
            ;;
        --force-camotics)
            FORCE_CAMOTICS=true
            shift
            ;;
        --force|-f)
            FORCE_REBUILD=true
            log_warn "Force rebuild enabled - will recreate chroot environment"
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Build CAMotics for ARM architecture using chroot and qemu"
            echo ""
            echo "Options:"
            echo "  -f, --force    Force recreation of chroot environment"
            echo "  -h, --help     Show this help message"
            echo ""
            echo "The script will preserve the existing chroot environment unless:"
            echo "  - It's incomplete or corrupted"
            echo "  - Wrong architecture is detected"
            echo "  - --force flag is used"
            exit 0
            ;;
        *)
            log_error "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Run main function
main